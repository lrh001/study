持久化之RDB
定期将内存中的数据写入到硬盘中(即数据库目录下)

数据从内存保存到硬盘的频率

save 900 1    ##900秒且有1次操作
save 300 10   ##300秒且有10次操作
save 60 10000 ##60秒且有10000次操作

停止redis服务时会将内存中的数据写入到硬盘中,所以恢复数据时需要先将服务停止,再将备份文件拷贝回数据库目录下.


save ##立即将内存的数据写入到硬盘(阻塞写存盘)
bgsave ##立即将内存的数据写入到硬盘(不阻塞写存盘)



RDB优点:
	高性能持久化实现
	比较适合大规模的数据恢复,且对数据完整性不高的场合


RDB缺点:服务器意外宕机后,最后一次数据会丢失

==========================================================
持久化之AOF
	记录redis服务的所有写操作(包括删除操作,恢复数据的时候注意!!!)
	不断的将新的写操作,追加到文件的末尾
	使用cat名可以查看文件内容

RDB和AOF同时开启时,AOF优先(优先加载AOF的数据文件)

vim /etc/redis/6379.conf
...
appendonly yes ##开启AOF
appendfilename "appendonly.aof" ##指定AOF文件名
...

appendfsync always
appendfsync everysec
appendfsync no

==========
使用AOF文件恢复数据
停止redis服务
将备份的AOF文件拷贝回数据库目录下
启用redis服务
==================================
修复AOF文件:把文件恢复到最后一次的正确操作
redis-check-aof --fix appendonly.aof

================================

AOF优点:可以灵活设置持久化方式
	出现意外宕机时,仅可能丢失1秒的数据

AOF缺点:
	持久化文件的体积通常会大于RDB方式
	恢复数据时比RDB方式慢(因为它要重新执行所有的命令)






























