文档管理

插入文档
save():不存在时创建再插入;_id存在时,修改值;一次只能写一条
insert():_id存在时,放弃插入;一次只能写一条
insertMany():一次可插入多条
db.a.insertMany([{_id:2,name:"jack"},{_id:3,name:"tom",age:20}])

==================================================
查询文档
find():显示所有行(默认输出20行,输入it再输出20行)
findOne():显示第一行

db.a.user6({条件},{需要显示的列})
db.user6.find({},{_id:0,name:1,uid:1})
##显示所有行的name和uid字段

db.user6.find({name:"root"},{_id:0,name:1,uid:1})
##显示name字段为root的name和uid字段

db.user6.find({},{_id:0,name:1,uid:1}).limit(3)
##显示前三行

db.user6.find({},{_id:0,name:1,uid:1}).skip(3)
##跳过前三行显示

db.user6.find({},{_id:0,name:1,uid:1}).sort({uid:-1})
##降序显示所有行的指定字段

db.user6.find({},{_id:0,name:1,uid:1}).sort({uid:1})
##升序显示所有行的指定字段
==================================================
匹配条件
相等比较
db.user6.find({uid:1},{_id:0})
##uid等于1的行

逻辑与比较
db.user6.find({uid:1,name:"root"},{_id:0})
##name等于root并且uid等于1的行

逻辑或比较 $or
db.user6.find({$or:[{uid:1},{name:"root"}]},{_id:0,name:1,uid:1})
##name等于root或者uid等于1的行

范围比较 
$in 在..里面
$nin 不在..里面
db.user6.find({uid:{$in:[1,3,5,6,10]}},{_id:0,name:1,uid:1})
##uid为1,3,5,6,10的
db.user6.find({shell:{$nin:["/bin/bash","/sbin/nologin"]}},{_id:0,name:1,uid:1,shell:1})
##shell不是/bin/bash或者/sbin/nologin

正则匹配
db.user6.find({name:/^[ac]/},{_id:0,name:1,uid:1})
##a或者c开头的

数值比较
$gt大于
$lt小于
$ne不等于
$gte大于等于
$lte小于等于
db.user6.find({uid:{$gt:100}},{_id:0,name:1,uid:1})
##uid大于100的

db.user6.find({uid:{$gt:100,$lt:120}},{_id:0,name:1,uid:1})
##uid大于100小于120的

db.user6.find({$or:[{uid:{$lt:10}},{uid:{$gt:20}}]},{_id:0,name:1,uid:1})
##uid小于10或者大于20的

=====================================================
更新文档
db.集合名.update({条件},{字段列表})
把文档的其他字段都删除了,只留下了修改的字段,且只修改与条件匹配的第一行!!!

$set
db.user6.update({uid:{$lte:5}},{$set:{password:"FFF",gid:2000}},false,true)
##修改符合条件的所有行

$unset
db.user6.update({name:"adm"},{$unset:{password:"FFF"}})
##删除符合条件的password字段

$inc
db.user6.update({name:"adm"},{$inc:{uid:10}})
##符合条件的uid字段的值加10
db.user6.update({name:"adm"},{$inc:{uid:-10}})
##符合条件的uid字段的值减10

数据操作命令
db.ta.save({name:"tom",like:["a","b","c","d","e"]})

$push
添加数组成员,可重复
db.ta.update({name:"tom"},{$push:{like:"A"}})

$addToSet
添加组成员,不可重复
db.ta.update({name:"tom"},{$addToSet:{like:"A"}})

$pop
db.ta.update({name:"tom"},{$pop:{like:1}})
##删除尾部成员
db.ta.update({name:"tom"},{$pop:{like:-1}})
##删除头部成员

$pull
db.ta.update({name:"tom"},{$pull:{like:"c"}})
##删除指定成员

====================================================
删除文档
db.ta.remove({})
##删除所有数据,但无法删除索引

db.ta.remove({条件})
##删除符合条件的数据,但无法删除索引






















