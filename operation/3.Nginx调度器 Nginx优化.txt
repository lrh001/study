案例1：Nginx反向代理(web调度器)
1.源码安装好Nginx(所需模块:with-stream,with-http_ssl_module)
2.修改/usr/local/nginx/conf/nginx.conf该配置文件

http {
.. ..
#使用upstream定义后端服务器集群，集群名称任意(如webserver)
#使用server定义集群中的具体服务器和端口
upstream webserver {
                ip_hash;#通过ip_hash设置调度规则为：相同客户端访问相同服务器
                server 192.168.2.100:80 weight=1 max_fails=2 fail_timeout=10; #代理的真实web服务器地址1
                server 192.168.2.200:80 weight=2 max_fails=2 fail_timeout=10; #代理的真实web服务器地址2
                server 192.168.2.101 down;
                #weight设置服务器权重值，默认值为1,数值越大优先级越高,访问的次数则越多
                #max_fails设置最大失败次数
                #fail_timeout设置失败超时时间，单位为秒
                #down标记服务器已关机，不参与集群调度
        }
.. ..
server {
        listen        80;
        server_name  localhost;
            location / {
            proxy_pass http://webserver; #通过proxy_pass将用户的请求转发给webserver集群
        }
}

3.重启nginx即可 /usr/local/nginx/sbin/nginx -s reload



案例2：Nginx的TCP/UDP调度器
1.源码安装好Nginx(所需模块:with-stream,with-http_ssl_module)
2.修改/usr/local/nginx/conf/nginx.conf该配置文件

stream {
            upstream backend {
               server 192.168.2.100:22;            //后端SSH服务器的IP和端口
               server 192.168.2.200:22;
}
            server {
                listen 12345;                    //Nginx监听的端口,该端口可以根据实际情况进行修改
                proxy_connect_timeout 1s;
                proxy_timeout 3s;
                proxy_pass backend;
             }
}
http {
.. ..
}

3.重启nginx即可 /usr/local/nginx/sbin/nginx -s reload


案例3：Nginx常见问题处理
1.自定义错吴页面,修改/usr/local/nginx/conf/nginx.conf该配置文件
charset utf-8; #网页支持中文显示
error_page   404  /40x.html; #定义404错误的页面

2.如何查看服务器状态信息
①nginx源码安装时添加--with-http_stub_status_module状态页面模块
②修改/usr/local/nginx/conf/nginx.conf该配置文件
… …
location /status {
                stub_status on;
                 #allow IP地址;
                 #deny IP地址;
        }
… …
③重启nginx即可 /usr/local/nginx/sbin/nginx -s reload
④curl  http://192.168.4.5/status #可以通过该方式测试效果,IP视实际情况而定

Active connections: 1 
server accepts handled requests
 10 10 3 
Reading: 0 Writing: 1 Waiting: 0

Active connections：当前活动的连接数量。
Accepts：已经接受客户端的连接总数量。
Handled：已经处理客户端的连接总数量。
（一般与accepts一致，除非服务器限制了连接数量）。
Requests：客户端发送的请求数量。
Reading：当前服务器正在读取客户端请求头的数量。
Writing：当前服务器正在写响应信息的数量。
Waiting：当前多少客户端在等待服务器的响应


3.优化Nginx并发量

修改Nginx配置文件，增加并发量
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
worker_processes  2;                    //与CPU核心数量一致
events {
worker_connections 65535;        //每个worker最大并发连接数
use epoll;
}

3）优化Linux内核参数（最大文件数量）
[root@proxy ~]# ulimit -a                        //查看所有属性值
[root@proxy ~]# ulimit -Hn 100000                //设置硬限制（临时规则）
[root@proxy ~]# ulimit -Sn 100000                //设置软限制（临时规则）
[root@proxy ~]# vim /etc/security/limits.conf
    .. ..
*               soft    nofile            100000
*               hard    nofile            100000
#该配置文件分4列，分别如下：
#用户或组    硬限制或软限制    需要限制的项目   限制的值

4）优化后测试服务器并发量（因为客户端没调内核参数，所以在proxy测试）
[root@proxy ~]# ab -n 2000 -c 2000 http://192.168.4.5/

4.优化Nginx数据包头缓存

2）修改Nginx配置文件，增加数据包头部缓存大小
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
client_header_buffer_size    1k;        //默认请求包头信息的缓存    
large_client_header_buffers  4 4k;        //大请求包头部信息的缓存个数与容量
.. ..
}
[root@proxy ~]# nginx -s reload



浏览器的缓存时间的长短由服务器上的配置设置

适合于多媒体数据(图片,视频,音频)
.....

location ~ \.(jpg|png|gif)$ {
                    expires 30d; #过期时间30天,即浏览器的缓存时间
        }
.....


日志切割

每周5的03点03分自动执行脚本完成日志切割工作。
[root@proxy ~]# vim /usr/local/nginx/logbak.sh
#!/bin/bash
date=`date +%Y%m%d`
logpath=/usr/local/nginx/logs
mv $logpath/access.log $logpath/access-$date.log
mv $logpath/error.log $logpath/error-$date.log
kill -USR1 $(cat $logpath/nginx.pid)  #kill发送信号创建新的日志文件 -usr1是信号参数
[root@proxy ~]# crontab -e
03 03 * * 5  /usr/local/nginx/logbak.sh

对页面进行压缩处理

1）修改Nginx配置文件
[root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
http {
.. ..
gzip on;                            //开启压缩
gzip_min_length 1000;                //小文件不压缩
gzip_comp_level 4;                //压缩比率
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                                    //对特定文件压缩，类型参考mime.types
.. ..
}

服务器内存缓存

1）如果需要处理大量静态文件，可以将文件缓存在内存，下次访问会更快。
http { 
open_file_cache          max=2000  inactive=20s;
        open_file_cache_valid    60s;
        open_file_cache_min_uses 5;
        open_file_cache_errors   off;
//设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
//文件句柄的有效时间是60秒，60秒后过期
//只有访问次数超过5次会被缓存
} 





















